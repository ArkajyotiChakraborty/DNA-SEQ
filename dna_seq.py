# -*- coding: utf-8 -*-
"""DNA_SEQ.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bh2F2pbiFyoW6_bReC9VcG-ue6qLk_nU

Name: Arkajyoti Chakraborty

College: Delhi Technological University
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

human_dna = pd.read_table('/content/drive/MyDrive/human.txt')
human_dna

human_dna.columns

human_dna['words']

Chimpanzee_dna = pd.read_table('/content/drive/MyDrive/chimpanzee.txt')
Chimpanzee_dna

dog_dna = pd.read_table('/content/drive/MyDrive/dog.txt')
dog_dna

"""Let's visualise the classes and data!"""

human_dna['class'].value_counts().sort_index().plot.bar()
plt.title("Class distribution of Human DNA")

Chimpanzee_dna['class'].value_counts().sort_index().plot.bar()
plt.title("Class distribution of Chimpanzee DNA")

dog_dna['class'].value_counts().sort_index().plot.bar()
plt.title("Class distribution of Dog DNA")

# Function to change the string into k-mers words..
def Kmers_funct(seq, size=6):
  return [seq[x:x+size].lower() for x in range(len(seq) - size + 1)]

human_dna['word'] = human_dna.apply(lambda x: Kmers_funct(x['words']), axis=1)
human_dna = human_dna.drop('words', axis=1)

Chimpanzee_dna['words'] = Chimpanzee_dna.apply(lambda x: Kmers_funct(x['sequence']), axis=1)
Chimpanzee_dna = Chimpanzee_dna.drop('sequence', axis=1)

dog_dna['words'] = dog_dna.apply(lambda x: Kmers_funct(x['sequence']), axis=1)
dog_dna = dog_dna.drop('sequence', axis=1)

human_dna

dog_dna

Chimpanzee_dna

human_texts = list(human_dna['words'])
for item in range(len(human_texts)):
    human_texts[item] = ' '.join(human_texts[item])
#separate labels
y_human = human_dna.iloc[:, 0].values

print(y_human)

chimp_texts = list(Chimpanzee_dna['words'])
for item in range(len(chimp_texts)):
    chimp_texts[item] = ' '.join(chimp_texts[item])
#separate labels
y_chim = Chimpanzee_dna.iloc[:, 0].values # y_chim for chimp_dna

dog_texts = list(dog_dna['words'])
for item in range(len(dog_texts)):
    dog_texts[item] = ' '.join(dog_texts[item])
#separate labels
y_dog = dog_dna.iloc[:, 0].values

print(y_chim)
print(y_dog)

"""Vectorization """

from sklearn.feature_extraction.text import CountVectorizer # using countvectorizer!! 
cv = CountVectorizer(ngram_range=(4,4)) #The n-gram size of 4 is previously determined by testing
X = cv.fit_transform(human_texts)
X_chimp = cv.transform(chimp_texts)
X_dog = cv.transform(dog_texts)

print(X.shape)
print(X_chimp.shape)
print(X_dog.shape)

from sklearn.model_selection import train_test_split as tts
X_train, X_test, y_train, y_test = tts(X,y_human,test_size = 0.20,random_state=42)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.metrics import classification_report

"""Naive Bayes"""

from sklearn.naive_bayes import MultinomialNB
model = MultinomialNB()
naive_bayes_model = model.fit(X_train,y_train)
naive_bayes_model_predict = naive_bayes_model.predict(X_test)
naive_bayes_report = classification_report(y_test,naive_bayes_model_predict)
print(naive_bayes_report)

from sklearn.tree import DecisionTreeClassifier
dct = DecisionTreeClassifier(criterion='entropy', random_state=1)
decision_tree_model = dct.fit(X_train,y_train)
decision_tree_model_predict = decision_tree_model.predict(X_test)
decision_tree_report = classification_report(y_test,decision_tree_model_predict)
print(decision_tree_report)

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(n_estimators=20)
random_forest_model = clf.fit(X_train,y_train)
random_forest_model_predict = random_forest_model.predict(X_test)
random_forest_report = classification_report(y_test,random_forest_model_predict)
print(random_forest_report)

from sklearn.linear_model import LogisticRegression

logistic_reg_model = LogisticRegression(n_jobs = -1, penalty='l2', multi_class='multinomial',class_weight = 'balanced',verbose=1).fit(X_train,y_train)
lr_model_predict = logistic_reg_model.predict(X_test)
lr_model_report = classification_report(y_test, lr_model_predict)
print(lr_model_report)